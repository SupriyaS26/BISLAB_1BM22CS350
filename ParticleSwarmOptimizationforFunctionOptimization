import numpy as np
def objective_function(x):
  return x**2
dim=1
lower_bound=-10
upper_bound=10
num_particles=30
max_iter=5
w=0.5 #Inertia weight
c1=1.5 #Cognitive coefficient
c2=1.5 #Social coefficient
positions = np.random.uniform(lower_bound, upper_bound, num_particles)
velocities = np.random.uniform(-1, 1, num_particles)
pbest_positions = np.copy(positions)
pbest_values = np.array([objective_function(x) for x in positions])
gbest_position = pbest_positions[np.argmin(pbest_values)]  # Best position found by any particle
gbest_value = np.min(pbest_values)  # Best value found by the swarm
for t in range(max_iter):
    for i in range(num_particles):
        # Calculate fitness of the current position
        fitness = objective_function(positions[i])

        # Update personal best if the current fitness is better (lower value for minimization)
        if fitness < pbest_values[i]:
            pbest_values[i] = fitness
            pbest_positions[i] = positions[i]

        # Update global best if the current fitness is better
        if fitness < gbest_value:
            gbest_value = fitness
            gbest_position = positions[i]

    # Update velocities and positions for each particle
    r1 = np.random.rand(num_particles)  # Random values for cognitive component
    r2 = np.random.rand(num_particles)  # Random values for social component

    # Update the velocities of the particles
    velocities = (w * velocities +
                  c1 * r1 * (pbest_positions - positions) +  # Cognitive part
                  c2 * r2 * (gbest_position - positions))   # Social part

    # Update the positions of the particles
    positions = positions + velocities

    # Ensure positions stay within bounds
    positions = np.clip(positions, lower_bound, upper_bound)

    # Print the progress of the swarm
    print(f"Iteration {t+1}/{max_iter}, Global Best Value: {gbest_value:.10f}")

# 7. Output the Best Solution: Output the best solution found during the iterations
print(f"\nOptimal solution found at x = {gbest_position:.10f}, with value f(x) = {gbest_value:.10f}")
